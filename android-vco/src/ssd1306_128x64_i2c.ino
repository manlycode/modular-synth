/*********************************************************************
This is an example for our Monochrome OLEDs based on SSD1306 drivers

  Pick one up today in the adafruit shop!
  ------> http://www.adafruit.com/category/63_98

This example is for a 128x64 size display using I2C to communicate
3 pins are required to interface (2 I2C and one reset)

Adafruit invests time and resources providing this open source code, 
please support Adafruit and open-source hardware by purchasing 
products from Adafruit!

Written by Limor Fried/Ladyada  for Adafruit Industries.  
BSD license, check license.txt for more information
All text above, and the splash screen must be included in any redistribution
*********************************************************************/

#include <Wire.h>
#include <Encoder.h>
#include <Adafruit_SSD1306.h>
#include <Adafruit_GFX.h>

#define OLED_RESET 4
Adafruit_SSD1306 display(OLED_RESET);

const int buttonPin = 2;     // the number of the pushbutton pin
int buttonState = 0;         // variable for reading the pushbutton status

Encoder myEnc(8, 9);

#if (SSD1306_LCDHEIGHT != 64)
#error("Height incorrect, please fix Adafruit_SSD1306.h!");
#endif

static unsigned char PROGMEM const triangle_wave[] =
{
  B00000000, B00000000, B01000000, B00000000, B00000000, B00000000, B00010000,  
  B00000000, B00000000, B10100000, B00000000, B00000000, B00000000, B00100000,  
  B00000000, B00000001, B00010000, B00000000, B00000000, B00000000, B01000000,  
  B00000000, B00000010, B00001000, B00000000, B00000000, B00000000, B10000000,  
  B00000000, B00000100, B00000100, B00000000, B00000000, B00000001, B00000000,  
  B00000000, B00001000, B00000010, B00000000, B00000000, B00000010, B00000000,  
  B00000000, B00010000, B00000001, B00000000, B00000000, B00000100, B00000000,  
  B00000000, B00100000, B00000000, B10000000, B00000000, B00001000, B00000000,  
  B00000000, B01000000, B00000000, B01000000, B00000000, B00010000, B00000000,  
  B00000000, B10000000, B00000000, B00100000, B00000000, B00100000, B00000000,  
  B00000001, B00000000, B00000000, B00010000, B00000000, B01000000, B00000000,  
  B00000010, B00000000, B00000000, B00001000, B00000000, B10000000, B00000000,  
  B00000100, B00000000, B00000000, B00000100, B00000001, B00000000, B00000000,  
  B00001000, B00000000, B00000000, B00000010, B00000010, B00000000, B00000000,  
  B00010000, B00000000, B00000000, B00000001, B00000100, B00000000, B00000000,  
  B00100000, B00000000, B00000000, B00000000, B10001000, B00000000, B00000000,  
  B01000000, B00000000, B00000000, B00000000, B01010000, B00000000, B00000000,  
  B10000000, B00000000, B00000000, B00000000, B00100000, B00000000, B00000000,  
 };

 static unsigned char PROGMEM const sine_wave[] =
{
  B00000110, B00000000, B00000000, B00000110, B00000000, B00000000, B00000000, 
  B00001001, B00000000, B00000000, B00001001, B00000000, B00000000, B00000000, 
  B00010000, B10000000, B00000000, B00010000, B10000000, B00000000, B00000000, 
  B00100000, B01000000, B00000000, B00100000, B01000000, B00000000, B00000000, 
  B00100000, B01000000, B00000000, B00100000, B01000000, B00000000, B00000000, 
  B01000000, B00100000, B00000000, B01000000, B00100000, B00000000, B00000000, 
  B01000000, B00100000, B00000000, B01000000, B00100000, B00000000, B00000000, 
  B10000000, B00010000, B00000000, B10000000, B00010000, B00000000, B00000000, 
  B10000000, B00010000, B00000000, B10000000, B00010000, B00000000, B00000000,

  B00000000, B00001000, B00000001, B00000000, B00001000, B00000001, B00000000, 
  B00000000, B00001000, B00000001, B00000000, B00001000, B00000001, B00000000, 
  B00000000, B00000100, B00000010, B00000000, B00000100, B00000010, B00000000, 
  B00000000, B00000100, B00000010, B00000000, B00000100, B00000010, B00000000, 
  B00000000, B00000010, B00000100, B00000000, B00000010, B00000100, B00000000, 
  B00000000, B00000010, B00000100, B00000000, B00000010, B00000100, B00000000, 
  B00000000, B00000001, B00001000, B00000000, B00000001, B00001000, B00000000, 
  B00000000, B00000000, B10010000, B00000000, B00000000, B10010000, B00000000, 
  B00000000, B00000000, B01100000, B00000000, B00000000, B01100000, B00000000, 
 };

static unsigned char PROGMEM const square_wave[] =
{
  B11111111, B10000000, B11111111, B10000000, B11111111, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B10000000, B10000000, B10000000, B10000000, B10000000, B10000000, B00000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B10000000, B10000000, B10000000, B10000000, B10000000, B10000000,
  B00000000, B11111111, B10000000, B11111111, B10000000, B11111111, B10000000,
 };

static unsigned char PROGMEM const saw_tooth[] =
{
  B00000000, B00000000, B01000000, B00000000, B00100000, B00000000, B00010000,
  B00000000, B00000000, B11000000, B00000000, B01100000, B00000000, B00100000,
  B00000000, B00000001, B01000000, B00000000, B10100000, B00000000, B01000000,
  B00000000, B00000010, B01000000, B00000001, B00100000, B00000000, B10000000,
  B00000000, B00000100, B01000000, B00000010, B00100000, B00000001, B00000000,
  B00000000, B00001000, B01000000, B00000100, B00100000, B00000010, B00000000,
  B00000000, B00010000, B01000000, B00001000, B00100000, B00000100, B00000000,
  B00000000, B00100000, B01000000, B00010000, B00100000, B00001000, B00000000,
  B00000000, B01000000, B01000000, B00100000, B00100000, B00010000, B00000000,
  B00000000, B10000000, B01000000, B01000000, B00100000, B00100000, B00000000,
  B00000001, B00000000, B01000000, B10000000, B00100000, B01000000, B00000000,
  B00000010, B00000000, B01000001, B00000000, B00100000, B10000000, B00000000,
  B00000100, B00000000, B01000010, B00000000, B00100001, B00000000, B00000000,
  B00001000, B00000000, B01000100, B00000000, B00100010, B00000000, B00000000,
  B00010000, B00000000, B01001000, B00000000, B00100100, B00000000, B00000000,
  B00100000, B00000000, B01010000, B00000000, B00101000, B00000000, B00000000,
  B01000000, B00000000, B01100000, B00000000, B00110000, B00000000, B00000000,
  B10000000, B00000000, B01000000, B00000000, B00100000, B00000000, B00000000,
 };

 static unsigned char PROGMEM const clear_wav[] =
{
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, 
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
  B11111111, B11111111, B11111111, B11111111, B11111111, B11111111, B11111111,
 };

  static unsigned char PROGMEM const cursor[] =
{
  B10000000, 
  B11000000, 
  B10100000, 
  B10010000, 
  B10001000, 
  B10000100, 
  B10001000, 
  B10010000, 
  B10100000, 
  B11000000, 
  B10000000, 
 };

static const unsigned char* waveforms[4] = {
  triangle_wave,
  sine_wave,
  square_wave,
  saw_tooth
};

static const int16_t cursor_y[3] = {
  20, 40, 60
};

int cursorIdx = 0;

void handleButtonPress() {
  if (digitalRead(buttonPin) == HIGH) {
    buttonState = 0;
  } else {
    buttonState = 1;
  }
}

void setup() {                
  pinMode(buttonPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(buttonPin), &handleButtonPress, CHANGE);

  Serial.begin(9600);
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);  // initialize with the I2C addr 0x3D (for the 128x64)
  display.clearDisplay();
  display.display();

  display.setRotation(1);
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(8,0);
  display.drawBitmap(9, 20, cursor, 8, 11, WHITE);
  display.display();
}

long oldPosition  = -999;
long waveformIdx = 0;

void loop() {
  long newPosition = myEnc.read();
  if (newPosition != oldPosition) {
    oldPosition = newPosition;
  
    if (newPosition % 4 == 0) {
      if (buttonState == 0) {
        if (cursorIdx == 0) {
          waveformIdx = (newPosition/4)%4;
          display.drawBitmap(22, 20, clear_wav, 56, 18, BLACK);
          display.drawBitmap(22, 20, waveforms[waveformIdx], 56, 18, WHITE);
          display.display();
        }
      } else {
        display.drawBitmap(9, cursor_y[cursorIdx], clear_wav, 8, 11, BLACK);
        cursorIdx = (newPosition/4)%3;
        display.drawBitmap(9, cursor_y[cursorIdx], cursor, 8, 11, WHITE);
        display.display();
      }
    }
  }
}